# =========================================
# Build Release Workflow
# -----------------------------------------
# Automates building, packaging, and releasing
# -----------------------------------------
# Source repo:
#   https://github.com/dimaslanjaka/nodejs-package-types/blob/main/.github/workflows/build-release.yml
# Raw file:
#   https://raw.githubusercontent.com/dimaslanjaka/nodejs-package-types/main/.github/workflows/build-release.yml
# Update workflow:
#   curl -L https://github.com/dimaslanjaka/nodejs-package-types/raw/main/.github/workflows/build-release.yml > .github/workflows/build-release.yml
# =========================================

name: Build Release

on:
  push:
    paths-ignore:
      - "**/*.tgz"
      - "**/*.gz"
      - "**/release*/**"
      - "**/dist/**"
      - "**garbage-collector**"
      - "**codeql**"
      - "**/.github/workflows/tester.yml"
  pull_request:
    types:
      - closed
    paths-ignore:
      - "**/release*/**"
      - "**/dist/**"
      - "**/*.tgz"
      - "**/*.gz"
      - "**/test*/**"
  workflow_dispatch:

# run single job
concurrency:
  group: build-release
  cancel-in-progress: true

jobs:
  build-release:
    name: build release
    env:
      NODE_OPTIONS: "--max_old_space_size=8192" #8192 4096 --expose-gc
      YARN_ENABLE_IMMUTABLE_INSTALLS: false
      ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN || secrets.GITHUB_TOKEN }}
      node-version: 22.x
      YARN_CHECKSUM_BEHAVIOR: update

    runs-on: ubuntu-latest

    steps:
      - name: "üîÑ Checkout repository and submodules"
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.ACCESS_TOKEN || secrets.GITHUB_TOKEN }}
          submodules: recursive

      - name: "‚öôÔ∏è Set EOL git configs"
        continue-on-error: true
        run: |
          git config core.eol lf
          git config core.autocrlf input
          git checkout-index --force --all

      - name: "üü¢ Initialize Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.node-version }}
          cache: "yarn"
          cache-dependency-path: ./package.json

      - name: "üß∞ Enable Corepack & prepare Yarn"
        run: |
          corepack enable
          # npm uninstall -g yarn
          # corepack prepare yarn@4.9.2 --activate
          # curl -L https://raw.githubusercontent.com/dimaslanjaka/nodejs-package-types/refs/heads/main/.yarnrc-template.yml -o .yarnrc.yml
          yarn set version 4.9.2

      - name: "üîÅ Pull & update submodules recursively"
        continue-on-error: true
        shell: bash
        run: |
          if [ -f ".gitmodules" ] && [ -s ".gitmodules" ]; then
            git submodule update --init --recursive
            git submodule update --recursive --remote
            git pull -X theirs
            echo "init submodules"
            git submodule init
            git submodule foreach "git submodule init"
            echo "sync submodules"
            git submodule sync
            git submodule foreach "git submodule sync"
            echo "update submodules"
            yarn dlx rimraf .git/modules
            yarn dlx binary-collections@https://raw.githubusercontent.com/dimaslanjaka/bin/master/releases/bin.tgz submodule-install
          else
            echo "No submodules found or .gitmodules is empty, skipping update."
            exit 0
          fi

      - name: "üåé Set environment variables"
        id: set-env
        shell: bash
        run: |
          echo "${HOME}/.local/bin" >> $GITHUB_PATH
          echo "${GITHUB_WORKSPACE}/bin" >> $GITHUB_PATH
          echo "${GITHUB_WORKSPACE}/node_modules/.bin" >> $GITHUB_PATH
          echo "GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c 1-6)" >> $GITHUB_ENV
          echo "GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c 1-6)" >> $GITHUB_OUTPUT
          echo "GITHUB_BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
          echo "GITHUB_BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
          echo "GITHUB_COMMIT_URL=https://github.com/${{github.repository}}/commit/$(echo $GITHUB_SHA)" >> $GITHUB_ENV
          echo "GITHUB_COMMIT_URL=https://github.com/${{github.repository}}/commit/$(echo $GITHUB_SHA)" >> $GITHUB_OUTPUT
          echo "GITHUB_RUNNER_URL=https://github.com/${{github.repository}}/commit/${{github.sha}}/checks/${{github.run_id}}" >> $GITHUB_ENV
          echo "GITHUB_RUNNER_URL=https://github.com/${{github.repository}}/commit/${{github.sha}}/checks/${{github.run_id}}" >> $GITHUB_OUTPUT
          echo "CACHE_NPM=$(npm config get cache)" >> $GITHUB_ENV
          echo "CACHE_NPM=$(npm config get cache)" >> $GITHUB_OUTPUT
          YARN_CURRENT=$(yarn -v)
          YARN_BERRY=3.2.1
          if [[ "ok" == "$(echo | awk "(${YARN_CURRENT} > ${YARN_BERRY}) { print \"ok\"; }")" ]]; then
            echo "CACHE_YARN=$(yarn config get cacheFolder)" >> $GITHUB_ENV
            echo "CACHE_YARN=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT
          else
            echo "CACHE_YARN=$(yarn cache dir)" >> $GITHUB_ENV
            echo "CACHE_YARN=$(yarn cache dir)" >> $GITHUB_OUTPUT
          fi
          echo "architecture=$(getconf LONG_BIT)" >> $GITHUB_ENV
          if [ -f "package-lock.json" ]; then
              echo "PACKAGE-MANAGER=npm" >> $GITHUB_OUTPUT
              echo "PACKAGE-MANAGER=npm" >> $GITHUB_ENV
          else
              echo "PACKAGE-MANAGER=yarn" >> $GITHUB_OUTPUT
              echo "PACKAGE-MANAGER=yarn" >> $GITHUB_ENV
          fi
          unameOut="$(uname -s)"
          case "${unameOut}" in
              Linux*)     machine=linux;;
              Darwin*)    machine=mac;;
              CYGWIN*)    machine=cygwin;;
              MINGW*)     machine=mingw;;
              *)          machine="unknown:${unameOut}"
          esac
          echo "machine=$machine" >> $GITHUB_OUTPUT
          echo "machine=$machine" >> $GITHUB_ENV

      - name: "üíæ Restore cache"
        uses: actions/cache@v4
        id: cache
        with:
          path: |
            **/.yarn
            **/release*
            **/yarn.lock
            **/node_modules
            **/tmp
            **/dist
            **/lib
            **/package-lock.json
            ${{ steps.set-env.outputs.CACHE_YARN }}
            ${{ steps.set-env.outputs.CACHE_NPM }}
          key: ${{ runner.os }}-${{ env.node-version }}-${{ hashFiles('**/yarn.lock', '**/package-lock.json', 'src/**/*.{js,ts,cjs,mjs}', 'rollup*.*', 'tsconfig*.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.node-version }}-${{ hashFiles('**/yarn.lock', '**/package-lock.json', 'src/**/*.{js,ts,cjs,mjs}', 'rollup*.*', 'tsconfig*.json') }}
            ${{ runner.os }}-

      - name: "üîé Check for updates (disabled)"
        shell: bash
        continue-on-error: true
        if: ${{ false }}
        run: |
          curl -L https://github.com/dimaslanjaka/nodejs-package-types/raw/main/postinstall.js > postinstall.js
          if [ -f "postinstall.js" ]; then
            if [ "${{ steps.set-env.outputs.PACKAGE-MANAGER }}" ]; then
                node postinstall.js
            else
                node postinstall.js --yarn
            fi
          fi

      - name: "üåê Install global packages"
        run: npm i -g typescript ts-node gulp-cli hexo-cli webpack-cli
        if: steps.cache.outputs.cache-hit != 'true'

      - name: "üì• Install dependencies"
        shell: bash
        run: |
          if [ -f "package-lock.json" ]; then
            npm install --legacy-peer-deps || npm install --verbose || npm install --no-shrinkwrap --update-binary
          else
            yarn install || yarn install --verbose
          fi

      - name: "üìù Dump environment info"
        shell: bash
        run: |
          echo "branch      : ${{ steps.set-env.outputs.GITHUB_BRANCH }}"
          echo "commit msg  : ${{ github.event.head_commit.message }}"
          echo "commit hash : ${{ steps.set-env.outputs.GITHUB_SHA_SHORT }}"
          echo "commit url  : ${{ steps.set-env.outputs.GITHUB_COMMIT_URL }}"
          echo "runner url  : ${{ steps.set-env.outputs.GITHUB_RUNNER_URL }}"
          echo "cache npm   : ${{ steps.set-env.outputs.CACHE_NPM }}"
          echo "cache yarn  : ${{ steps.set-env.outputs.CACHE_YARN }}"
          echo "package mgr : "${{ steps.set-env.outputs.PACKAGE-MANAGER }}""

      - name: "üìö List the state of node modules"
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        shell: bash
        continue-on-error: true
        run: |
          if [ -f "package-lock.json" ]; then
            npm list
          else
            YARN_VERSION=$(yarn -v)
            if [[ "$YARN_VERSION" =~ ^[2-9] ]]; then
              yarn info --all
            else
              yarn list
            fi
          fi

      - name: "üßπ Clean project"
        run: npm run clean

      - name: "üî® Build project"
        run: npm run build

      - name: "üì¶ Pack project"
        run: npm run pack --if-present

      - name: "üóëÔ∏è Remove packageManager from package.json"
        shell: bash
        run: |
          # Remove packageManager from package.json if it exists
          # Prefer jq if available, otherwise use Node.js (cross-platform)
          if command -v jq >/dev/null 2>&1; then
            jq 'del(.packageManager)' package.json > temp.json && mv temp.json package.json
            # Ensure package.json ends with a single empty line
            awk 'NR==1{print $0} NR>1{print $0} END{print ""}' package.json > temp.json && mv temp.json package.json
          else
            node -e "let f='package.json';let j=require('./'+f);delete j.packageManager;require('fs').writeFileSync(f,JSON.stringify(j,null,2)+'\n');"
          fi

      # https://github.com/marketplace/actions/verify-changed-files
      - name: "üïµÔ∏è‚Äç‚ôÇÔ∏è Check for changes in build artifacts"
        id: changes
        uses: tj-actions/verify-changed-files@v20
        with:
          files: |
            release*
            dist
            lib
            !node_modules
            !tmp

      - shell: bash
        name: "üìã Show changed files"
        run: |
          echo "Changed files: ${{ steps.changes.outputs.changed_files }}"

      - name: "üë§ Configure git user/email"
        if: steps.changes.outputs.files_changed == 'true'
        continue-on-error: true
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'
      - name: "‚ûï Add build files to git"
        if: steps.changes.outputs.files_changed == 'true'
        continue-on-error: true
        run: |
          git config set advice.addIgnoredFile false
          git add release || true
          git add releases || true
          git add dist || true
          git add lib || true
      - name: "‚¨áÔ∏è Pull latest before push"
        run: git pull -X theirs
        if: steps.changes.outputs.files_changed == 'true'
      - name: "üöÄ Push changes to remote"
        if: steps.changes.outputs.files_changed == 'true'
        shell: bash
        run: |
          if [ $(git diff --cached --name-only | wc -l) -gt "0" ]; then
            echo "Staged files and their sizes:"
            for file in $(git diff --cached --name-only); do
              if [ -f "$file" ]; then
                size_bytes=$(stat -c%s "$file")
                size_mb=$((size_bytes / 1024 / 1024))
                echo "${size_mb}MB $file"
                if [ "$size_mb" -gt 30 ]; then
                  echo "Error: $file exceeds 30MB ($size_mb MB). Aborting push."
                  echo "Listing contents of $file:\n\n"
                  tar -tzvf "$file"
                  exit 1
                fi
              fi

            done
            git commit -m "chore: update build from ${{ env.GITHUB_COMMIT_URL }}" -m "commit hash: ${{ env.GITHUB_SHA_SHORT }}" -m "commit url: ${{ env.GITHUB_COMMIT_URL }}" -m "runner: ${{ env.GITHUB_RUNNER_URL }}"
            git push
          fi

      - name: "üßπ Clean GitHub Actions cache (npx)"
        run: npx clean-github-actions-cache
        continue-on-error: true
